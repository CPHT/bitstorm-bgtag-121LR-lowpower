dim tmp(10)
dim device_name(17)
dim adv_data(20)    # custom advertisement data
dim mac_addr(6)     # Bluetooth MAC address container
dim led_result, led_port, led_data

event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version, hw)

	# configure P1.3 as output
    call hardware_io_port_config_direction(1, $08)
    call hardware_io_port_write(1, $08, $08)

    # get Bluetooth MAC address of this device (NOTE: this is little-endian!)
    call system_address_get()(mac_addr(0:6))
	
    device_name(0:1) = $42  # 'B'
    device_name(1:1) = $69  # 'i'
    device_name(2:1) = $74  # 't'
    device_name(3:1) = $53  # 'S'
    device_name(4:1) = $74  # 't'
    device_name(5:1) = $6f  # 'o'
    device_name(6:1) = $72  # 'r'
    device_name(7:1) = $6d  # 'm'
    device_name(8:1) = $20 # ' '
    device_name(9:1) = (mac_addr(2:1)/$10) + 48 + ((mac_addr(2:1)/$10)/10*7) # MAC byte 4 10's digit
    device_name(10:1) = (mac_addr(2:1)&$f)  + 48 + ((mac_addr(2:1)&$f )/10*7) # MAC byte 4 1's digit
    device_name(11:1) = $3a # ':'
    device_name(12:1) = (mac_addr(1:1)/$10) + 48 + ((mac_addr(1:1)/$10)/10*7) # MAC byte 5 10's digit
    device_name(13:1) = (mac_addr(1:1)&$f)  + 48 + ((mac_addr(1:1)&$f )/10*7) # MAC byte 5 1's digit
    device_name(14:1) = $3a # ':'
    device_name(15:1) = (mac_addr(0:1)/$10) + 48 + ((mac_addr(0:1)/$10)/10*7) # MAC byte 6 10's digit
    device_name(16:1) = (mac_addr(0:1)&$f)  + 48 + ((mac_addr(0:1)&$f )/10*7) # MAC byte 6 1's digit
    
    # write custom device name to local GATT attribute
    call attributes_write(c_device_name, 0, 17, device_name(0:17))	


    # flags for discoverable/connectable
    adv_data(0:1) = $02 # ad field length = 2 bytes
    adv_data(1:1) = gap_ad_type_flags   # ad field type = 0x01 (Flags)
    adv_data(2:1) = $06 # flags = 0x06, connectable/undirected

    # tx power field advertisement, iOS apps may need this
    adv_data(3:1) = $02 # ad field length = 2 bytes
    adv_data(4:1) = gap_ad_type_txpower    # ad field type = 0x0A (TX Power)
    adv_data(5:1) = $08 # TX power in dBm
    
    # custom manufacturer
    adv_data(6:1) = 15  # ad field length 
    adv_data(7:1) = $ff # ad field type = 0xFF (Manufacturer Specific Data)
    adv_data(8:1) = $01 # unknown/prototype Company Identifier Code - LSB of decimal 5121
    adv_data(9:1) = $14 # unknown/prototype Company Identifier Code - MSB of decimal 5121
    adv_data(10:1) = $ee # minor LSB
    adv_data(11:1) = $ee # minor MSB
    adv_data(12:1) = $01 # major LSB	
    adv_data(13:1) = $00 # major MSB
	
    adv_data(14:1) = mac_addr(0:1)
    adv_data(15:1) = mac_addr(1:1)
    adv_data(16:1) = mac_addr(2:1)
    adv_data(17:1) = mac_addr(3:1)
    adv_data(18:1) = mac_addr(4:1)
    adv_data(19:1) = mac_addr(5:1)
	adv_data(20:1) = 0
	adv_data(21:1) = 0
	

	# set custom advertisement data
    call gap_set_adv_data(0, 22, adv_data(0:22))

	# Set advertising rate to min 980ms, max 1020ms, all three channels'
	# Should center on 1000ms + random 20ms (per BT spec)
	call gap_set_adv_parameters($620, $660, 7)
	
	
	#set to advertising mode (use gap_user_data for iBeacon, gap_general_discoverable for regular)	
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	
	call gap_set_adv_data(0, 22, adv_data(0:22))	
end

procedure toggle_led()
   call hardware_io_port_read(1, $08)(led_result, led_port, led_data)

   if led_data & $08 then
      call hardware_io_port_write(1, $08, $00)
   else
      call hardware_io_port_write(1, $08, $08)
   end if
end

event hardware_soft_timer(handle)
	if handle = 0 then
		call toggle_led()
	end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	call hardware_set_soft_timer(5000,0,0)
end

event connection_disconnected(handle,result)
	call hardware_set_soft_timer(0,0,0)
    call hardware_io_port_write(1, $08, $08)
	
	#connection disconnected, continue advertising
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end
